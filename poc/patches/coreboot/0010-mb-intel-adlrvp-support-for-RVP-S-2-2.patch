From 16a9e8058a70ae245eb20eb4537f01fa6eca71f2 Mon Sep 17 00:00:00 2001
From: Michal Gorlas <michal.gorlas@9elements.com>
Date: Mon, 30 Jun 2025 14:02:00 +0200
Subject: [PATCH] mb/intel/adlrvp: support for RVP-S 2/2

Signed-off-by: Michal Gorlas <michal.gorlas@9elements.com>
---
 src/mainboard/intel/adlrvp/ramstage.c       | 38 +++++++------
 src/soc/intel/common/block/smm/smihandler.c | 61 +++++++++++++++++++--
 2 files changed, 78 insertions(+), 21 deletions(-)

diff --git a/src/mainboard/intel/adlrvp/ramstage.c b/src/mainboard/intel/adlrvp/ramstage.c
index fd8e20332b..0df97e3e44 100644
--- a/src/mainboard/intel/adlrvp/ramstage.c
+++ b/src/mainboard/intel/adlrvp/ramstage.c
@@ -5,7 +5,7 @@
 #include <console/console.h>
 #include <device/pci_ids.h>
 #include <device/pci_ops.h>
-#include <soc/gpio_soc_defs.h>
+#include <soc/gpio.h>
 #include <soc/pci_devs.h>
 #include <soc/soc_chip.h>
 #include <static.h>
@@ -63,27 +63,29 @@ void variant_update_power_limits(void)
 	}
 }
 
-static const struct typec_aux_bias_pads pad_config = { GPP_E23, GPP_E22 };
 
-static const struct board_id_iom_port_config {
-	int board_id;
-	enum typec_port_index port;
-} port_config[] = {
-	{ ADL_P_LP4_1,	TYPE_C_PORT_2 },
-	{ ADL_P_LP4_2,	TYPE_C_PORT_2 },
-	{ ADL_P_DDR4_1,	TYPE_C_PORT_2 },
-	{ ADL_P_DDR4_2,	TYPE_C_PORT_2 },
-	{ ADL_P_LP5_1,	TYPE_C_PORT_2 },
-	{ ADL_P_LP5_2,	TYPE_C_PORT_2 },
-	{ ADL_M_LP4,	TYPE_C_PORT_1 },
-	{ ADL_M_LP5,	TYPE_C_PORT_0 },
-};
 
 static void variant_update_typec_init_config(void)
 {
 	/* Skip filling aux bias gpio pads for Windows SKUs */
-	if (!(CONFIG(BOARD_INTEL_ADLRVP_P_EXT_EC) || CONFIG(BOARD_INTEL_ADLRVP_RPL_EXT_EC)))
-		return;
+#if ((CONFIG(BOARD_INTEL_ADLRVP_P_EXT_EC) || CONFIG(BOARD_INTEL_ADLRVP_RPL_EXT_EC)))
+
+	static const struct board_id_iom_port_config {
+	int board_id;
+	enum typec_port_index port;
+	} port_config[] = {
+		{ ADL_P_LP4_1,	TYPE_C_PORT_2 },
+		{ ADL_P_LP4_2,	TYPE_C_PORT_2 },
+		{ ADL_P_DDR4_1,	TYPE_C_PORT_2 },
+		{ ADL_P_DDR4_2,	TYPE_C_PORT_2 },
+		{ ADL_P_LP5_1,	TYPE_C_PORT_2 },
+		{ ADL_P_LP5_2,	TYPE_C_PORT_2 },
+		{ ADL_M_LP4,	TYPE_C_PORT_1 },
+		{ ADL_M_LP5,	TYPE_C_PORT_0 },
+	};
+
+
+	const struct typec_aux_bias_pads pad_config = { GPP_E23, GPP_E22 };
 
 	config_t *config = config_of_soc();
 	int board_id = get_board_id();
@@ -94,6 +96,8 @@ static void variant_update_typec_init_config(void)
 		memcpy(&config->typec_aux_bias_pads[port_config[i].port], &pad_config,
 			sizeof(pad_config));
 	}
+#endif
+	return;
 }
 
 void variant_devtree_update(void)
diff --git a/src/soc/intel/common/block/smm/smihandler.c b/src/soc/intel/common/block/smm/smihandler.c
index 59489a4f03..793c1cc161 100644
--- a/src/soc/intel/common/block/smm/smihandler.c
+++ b/src/soc/intel/common/block/smm/smihandler.c
@@ -20,6 +20,7 @@
 #include <intelblocks/smihandler.h>
 #include <intelblocks/tco.h>
 #include <intelblocks/uart.h>
+#include <payload_mm_interface.h>
 #include <smmstore.h>
 #include <soc/nvs.h>
 #include <soc/pci_devs.h>
@@ -29,6 +30,7 @@
 #include <soc/smbus.h>
 #include <spi-generic.h>
 #include <stdint.h>
+#include <payload_mm_interface.h>
 
 /* SoC overrides. */
 
@@ -61,6 +63,17 @@ __weak void mainboard_smi_espi_handler(void)
 	/* no-op */
 }
 
+/* MM Payload interface overrides if enabled*/
+__weak int payload_mm_call_entrypoint(struct lb_entry_context context) {
+	return 1;
+}
+
+static struct lb_entry_context context = {
+	.command = 0,
+	.pm1_cnt = 0,
+	.acpi_base = 0,
+};
+
 /* Common Functions */
 
 static void *find_save_state(const struct smm_save_state_ops *save_state_ops,
@@ -316,6 +329,30 @@ static void southbridge_smi_store(
 	}
 }
 
+static void southbridge_smi_payload(
+	const struct smm_save_state_ops *save_state_ops)
+{
+	u8 sub_command, ret;
+	void *io_smi;
+	uint32_t reg_ebx;
+
+	io_smi = find_save_state(save_state_ops, APM_CNT_PAYLOAD_MM);
+
+	if (!io_smi)
+		return;
+
+	/* Command and return value in EAX */
+	sub_command = (save_state_ops->get_reg(io_smi, RAX) >> 8) & 0xff;
+
+	/* MM shared buffer address in EBX */
+	reg_ebx = save_state_ops->get_reg(io_smi, RBX);
+
+	/* drivers/mm_payload_interface/smi.c */
+	ret = payload_mm_exec_interface(sub_command, reg_ebx);
+
+	save_state_ops->set_reg(io_smi, RAX, ret);
+}
+
 __weak const struct gpio_lock_config *soc_gpio_lock_config(size_t *num)
 {
 	*num = 0;
@@ -373,26 +410,42 @@ void smihandler_southbridge_apmc(
 	const struct smm_save_state_ops *save_state_ops)
 {
 	uint8_t reg8;
+	int mm_payload_ret;
+	context.pm1_cnt = pmc_read_pm1_control();
 
 	reg8 = apm_get_apmc();
 	switch (reg8) {
 	case APM_CNT_ACPI_DISABLE:
-		pmc_disable_pm1_control(SCI_EN);
+		context.command = PAYLOAD_MM_ACPI_DISABLE;
+		mm_payload_ret = payload_mm_call_entrypoint(context);
+		if (mm_payload_ret)
+			pmc_disable_pm1_control(SCI_EN);
 		break;
 	case APM_CNT_ACPI_ENABLE:
-		pmc_enable_pm1_control(SCI_EN);
+		context.command = PAYLOAD_MM_ACPI_ENABLE;
+		mm_payload_ret = payload_mm_call_entrypoint(context);
+		if (mm_payload_ret)
+			pmc_enable_pm1_control(SCI_EN);
 		break;
 	case APM_CNT_ELOG_GSMI:
 		if (CONFIG(ELOG_GSMI))
 			southbridge_smi_gsmi(save_state_ops);
 		break;
 	case APM_CNT_SMMSTORE:
-		if (CONFIG(SMMSTORE))
-			southbridge_smi_store(save_state_ops);
+		if (CONFIG(SMMSTORE)) {
+			context.command = PAYLOAD_MM_SMM_STORE;
+			mm_payload_ret = payload_mm_call_entrypoint(context);
+			if (mm_payload_ret)
+				southbridge_smi_store(save_state_ops);
+		}
 		break;
 	case APM_CNT_FINALIZE:
 		finalize();
 		break;
+	case APM_CNT_PAYLOAD_MM:
+		if (CONFIG(PAYLOAD_MM_INTERFACE))
+			southbridge_smi_payload(save_state_ops);
+		break;
 	}
 
 	mainboard_smi_apmc(reg8);
-- 
2.49.0

